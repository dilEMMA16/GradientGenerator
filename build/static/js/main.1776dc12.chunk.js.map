{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleDegreeChange","degrees","prevDegrees","state","console","log","newDegrees","document","getElementById","style","transform","c1","color1","c2","color2","c3","color3","deg","setState","gradient","backgroundColor","backgroundImage","handleSliderChange","e","getNewGradient","bind","red1st","Math","floor","random","red2nd","red3rd","green1st","green2nd","green3rd","x","y","this","blue1st","blue2nd","blue3rd","className","id","onClick","value","orientation","onChange","min","max","step","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1776dc12.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Component } from 'react';\nimport Slider from 'react-rangeslider';\n// To include the default styles\nimport 'react-rangeslider/lib/index.css'\n\n//add in input slider -- control angle based on that\n\n// button to copy css code for gradient\n\n//show angle of gradient - button highlight, label, etc.\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.getNewGradient = this.getNewGradient.bind(this);\n        this.handleDegreeChange = this.handleDegreeChange.bind(this);\n        this.handleSliderChange = this.handleSliderChange.bind(this);\n\n        let red1st = Math.floor(Math.random()*255);\n        let red2nd = Math.floor(Math.random()*255);\n        let red3rd = Math.floor(Math.random()*255);\n\n        let green1st = Math.floor(Math.random()*255);\n        let green2nd = Math.floor(Math.random()*255);\n        let green3rd = Math.floor(Math.random()*255);\n\n        let blue1st = Math.floor(Math.random()*255);\n        let blue2nd = Math.floor(Math.random()*255);\n        let blue3rd = Math.floor(Math.random()*255);\n\n        let color1 = 'rgb(' + red1st + ',' + green1st + ',' + blue1st + ')';\n        let color2 = 'rgb(' + red2nd + ','+ green2nd + ',' + blue2nd + ')';\n        let color3 = 'rgb(' + red3rd + ','+ green3rd + ',' + blue3rd + ')';\n\n\n        let deg = 180;\n\n\n\n        this.state = {\n                degrees: deg,\n                x: 0,\n                y: 0,\n                color1: color1,\n                color2: color2,\n                color3: color3,\n                gradient: {\n                      backgroundColor: color1,\n                      backgroundImage: `linear-gradient(${deg}deg, ${color1} 0%, ${color2} 50%, ${color3} 100%)`,\n                },\n              };\n              console.log(\"constructor\");\n              console.log(this.state);\n    }\n\n\n\n\n    componentDidMount(){\n        console.log(\"did mount\");\n        console.log(this.state.gradient);\n    }\n\n\n    handleDegreeChange = (degrees) => {\n            let prevDegrees = this.state.degrees;\n            console.log(prevDegrees + \"DEG\");\n            console.log(degrees);\n\n            let newDegrees = (360 - prevDegrees) + degrees;\n\n            console.log(newDegrees + \"DEG2\");\n\n            let appDiv = document.getElementById('app');\n            let rotate = appDiv.style.transform = `rotate(${newDegrees})`\n\n            let c1 = this.state.color1;\n            let c2 = this.state.color2;\n            let c3 = this.state.color3;\n            let deg = degrees;\n\n            console.log(deg + \"logs\");\n\n            this.setState((state) => {\n                // Important: read `state` instead of `this.state` when updating.\n                return {\n                    gradient: {\n                          backgroundColor: c1,\n                          backgroundImage: `linear-gradient(${deg}deg, ${c1} 0%, ${c2} 50%, ${c3} 100%)`,\n                    },\n                    deg: degrees,\n                    degrees: degrees,\n                }\n              });\n\n             console.log(this.state);\n    }\n\n\n    getNewGradient() {\n\n            let red1st = Math.floor(Math.random()*255);\n            let red2nd = Math.floor(Math.random()*255);\n            let red3rd = Math.floor(Math.random()*255);\n\n            let green1st = Math.floor(Math.random()*255);\n            let green2nd = Math.floor(Math.random()*255);\n            let green3rd = Math.floor(Math.random()*255);\n\n            let blue1st = Math.floor(Math.random()*255);\n            let blue2nd = Math.floor(Math.random()*255);\n            let blue3rd = Math.floor(Math.random()*255);\n\n            let c1 = 'rgb(' + red1st + ','+ green1st + ',' + blue1st + ')';\n            let c2 = 'rgb(' + red2nd + ','+ green2nd + ',' + blue2nd + ')';\n            let c3 = 'rgb(' + red3rd + ','+ green3rd + ',' + blue3rd + ')';\n\n            console.log(c1 + c2 + c3);\n\n            this.setState((state) => {\n                // Important: read `state` instead of `this.state` when updating.\n                return {\n                    x: 0,\n                    y: 0,\n                    deg: 180,\n                    degrees: 180,\n                    color1: c1,\n                    color2: c2,\n                    color3: c3,\n                    gradient: {\n                          backgroundColor: c1,\n                          backgroundImage: `linear-gradient(180deg, ${c1} 0%, ${c2} 50%, ${c3} 100%)`,\n                    },\n                }\n              });\n\n                  console.log(this.state);\n        }\n\n\n//    onMouseMove(e) {\n//        let x = e.nativeEvent.offsetX;\n//        let y = e.nativeEvent.offsetY;\n//\n//\n//        this.setState({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\n//        console.log(this.state.x + this.state.y);\n//        let deg = (x + y) % 360;\n//        console.log(\"new degs --> \" + deg);\n//        this.handleDegreeChange(deg);\n//    }\n\n\n    handleSliderChange = (e) => {\n//        this.setState({deg: e.target.value});\n        //this.setState({deg: e});\n        this.setState((state) => {\n            return {\n                        deg: e,\n                        degrees: e,\n            }\n        });\n        console.log(\"new degs --> \" + this.state.deg);\n        this.handleDegreeChange(this.state.deg);\n    }\n\n//            <div className=\"App\" id='app' onMouseMove={this.onMouseMove.bind(this)} style={this.state.gradient}>\n\n//<input\n//                      id=\"angle\"\n//                      type=\"range\"\n//                      className='slider'\n//                      orient=\"vertical\"\n//                      min=\"0\" max=\"360\"\n//                      value={this.state.deg}\n//                      onChange={this.handleSliderChange}\n//                      step=\"1\"/>\n\n    render() {\n        return (\n            <div className=\"App\" id='app'  style={this.state.gradient}>\n                <button id=\"switchGradientButton\" onClick={this.getNewGradient}>\n                      switch <br/>it up\n                </button>\n                <div id=\"colorsUsed\">\n                    {this.state.color1}\n                    <br/>\n                    {this.state.color2}\n                    <br/>\n                    {this.state.color3}\n                    <br/><br/><br/><br/>\n                    {this.state.degrees} &#176;\n                    <br/><br/><br/><br/>\n                    backgroundColor: {this.state.gradient.backgroundColor} <br/><br/>\n                    backgroundImage: {this.state.gradient.backgroundImage}\n\n                </div>\n                <Slider\n                    value={this.state.deg}\n                    orientation='vertical'\n                    onChange={this.handleSliderChange}\n                    min={0}\n                    max={360}\n                    step={1}\n                    id='valueSlider'\n                />\n                <div id=\"angleChoices\">\n                    <button id=\"180deg\" onClick={() => { this.handleDegreeChange(180) }}>\n                          180 <br/>deg\n                    </button>\n                    <br/>\n                    <button id=\"180deg\" onClick={() => { this.handleDegreeChange(90) }}>\n                           &nbsp;90&nbsp; <br/>deg\n                    </button>\n                    <br/>\n                    <button id=\"180deg\" onClick={() => { this.handleDegreeChange(62) }}>\n                            &nbsp;62&nbsp; <br/>deg\n                    </button>\n                </div>\n\n\n            </div>\n        )\n    }\n\n\n}\n\n\n\n\n\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}